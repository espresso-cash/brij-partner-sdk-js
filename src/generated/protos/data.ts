// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.29.3
// source: protos/data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp.js";

export const protobufPackage = "brij.storage.v1";

export enum DataType {
  DATA_TYPE_UNSPECIFIED = 0,
  DATA_TYPE_PHONE = 1,
  DATA_TYPE_EMAIL = 2,
  DATA_TYPE_NAME = 3,
  DATA_TYPE_BIRTH_DATE = 4,
  DATA_TYPE_DOCUMENT = 5,
  DATA_TYPE_BANK_INFO = 6,
  DATA_TYPE_SELFIE_IMAGE = 7,
  UNRECOGNIZED = -1,
}

export function dataTypeFromJSON(object: any): DataType {
  switch (object) {
    case 0:
    case "DATA_TYPE_UNSPECIFIED":
      return DataType.DATA_TYPE_UNSPECIFIED;
    case 1:
    case "DATA_TYPE_PHONE":
      return DataType.DATA_TYPE_PHONE;
    case 2:
    case "DATA_TYPE_EMAIL":
      return DataType.DATA_TYPE_EMAIL;
    case 3:
    case "DATA_TYPE_NAME":
      return DataType.DATA_TYPE_NAME;
    case 4:
    case "DATA_TYPE_BIRTH_DATE":
      return DataType.DATA_TYPE_BIRTH_DATE;
    case 5:
    case "DATA_TYPE_DOCUMENT":
      return DataType.DATA_TYPE_DOCUMENT;
    case 6:
    case "DATA_TYPE_BANK_INFO":
      return DataType.DATA_TYPE_BANK_INFO;
    case 7:
    case "DATA_TYPE_SELFIE_IMAGE":
      return DataType.DATA_TYPE_SELFIE_IMAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataType.UNRECOGNIZED;
  }
}

export function dataTypeToJSON(object: DataType): string {
  switch (object) {
    case DataType.DATA_TYPE_UNSPECIFIED:
      return "DATA_TYPE_UNSPECIFIED";
    case DataType.DATA_TYPE_PHONE:
      return "DATA_TYPE_PHONE";
    case DataType.DATA_TYPE_EMAIL:
      return "DATA_TYPE_EMAIL";
    case DataType.DATA_TYPE_NAME:
      return "DATA_TYPE_NAME";
    case DataType.DATA_TYPE_BIRTH_DATE:
      return "DATA_TYPE_BIRTH_DATE";
    case DataType.DATA_TYPE_DOCUMENT:
      return "DATA_TYPE_DOCUMENT";
    case DataType.DATA_TYPE_BANK_INFO:
      return "DATA_TYPE_BANK_INFO";
    case DataType.DATA_TYPE_SELFIE_IMAGE:
      return "DATA_TYPE_SELFIE_IMAGE";
    case DataType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DocumentType {
  DOCUMENT_TYPE_UNSPECIFIED = 0,
  DOCUMENT_TYPE_VOTER_ID = 1,
  UNRECOGNIZED = -1,
}

export function documentTypeFromJSON(object: any): DocumentType {
  switch (object) {
    case 0:
    case "DOCUMENT_TYPE_UNSPECIFIED":
      return DocumentType.DOCUMENT_TYPE_UNSPECIFIED;
    case 1:
    case "DOCUMENT_TYPE_VOTER_ID":
      return DocumentType.DOCUMENT_TYPE_VOTER_ID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DocumentType.UNRECOGNIZED;
  }
}

export function documentTypeToJSON(object: DocumentType): string {
  switch (object) {
    case DocumentType.DOCUMENT_TYPE_UNSPECIFIED:
      return "DOCUMENT_TYPE_UNSPECIFIED";
    case DocumentType.DOCUMENT_TYPE_VOTER_ID:
      return "DOCUMENT_TYPE_VOTER_ID";
    case DocumentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Name {
  firstName: string;
  lastName: string;
}

export interface BirthDate {
  value: Date | undefined;
}

export interface Document {
  type: DocumentType;
  number: string;
  countryCode: string;
}

export interface BankInfo {
  accountNumber: string;
  bankCode: string;
  bankName: string;
}

export interface Email {
  value: string;
}

export interface SelfieImage {
  value: Uint8Array;
}

export interface Phone {
  value: string;
}

function createBaseName(): Name {
  return { firstName: "", lastName: "" };
}

export const Name: MessageFns<Name> = {
  encode(message: Name, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Name {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Name {
    return {
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
    };
  },

  toJSON(message: Name): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Name>, I>>(base?: I): Name {
    return Name.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Name>, I>>(object: I): Name {
    const message = createBaseName();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    return message;
  },
};

function createBaseBirthDate(): BirthDate {
  return { value: undefined };
}

export const BirthDate: MessageFns<BirthDate> = {
  encode(message: BirthDate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      Timestamp.encode(toTimestamp(message.value), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BirthDate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBirthDate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BirthDate {
    return { value: isSet(object.value) ? fromJsonTimestamp(object.value) : undefined };
  },

  toJSON(message: BirthDate): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BirthDate>, I>>(base?: I): BirthDate {
    return BirthDate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BirthDate>, I>>(object: I): BirthDate {
    const message = createBaseBirthDate();
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseDocument(): Document {
  return { type: 0, number: "", countryCode: "" };
}

export const Document: MessageFns<Document> = {
  encode(message: Document, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.number !== "") {
      writer.uint32(18).string(message.number);
    }
    if (message.countryCode !== "") {
      writer.uint32(26).string(message.countryCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Document {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Document {
    return {
      type: isSet(object.type) ? documentTypeFromJSON(object.type) : 0,
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
    };
  },

  toJSON(message: Document): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = documentTypeToJSON(message.type);
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Document>, I>>(base?: I): Document {
    return Document.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Document>, I>>(object: I): Document {
    const message = createBaseDocument();
    message.type = object.type ?? 0;
    message.number = object.number ?? "";
    message.countryCode = object.countryCode ?? "";
    return message;
  },
};

function createBaseBankInfo(): BankInfo {
  return { accountNumber: "", bankCode: "", bankName: "" };
}

export const BankInfo: MessageFns<BankInfo> = {
  encode(message: BankInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountNumber !== "") {
      writer.uint32(10).string(message.accountNumber);
    }
    if (message.bankCode !== "") {
      writer.uint32(18).string(message.bankCode);
    }
    if (message.bankName !== "") {
      writer.uint32(26).string(message.bankName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BankInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBankInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountNumber = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bankCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bankName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BankInfo {
    return {
      accountNumber: isSet(object.accountNumber) ? globalThis.String(object.accountNumber) : "",
      bankCode: isSet(object.bankCode) ? globalThis.String(object.bankCode) : "",
      bankName: isSet(object.bankName) ? globalThis.String(object.bankName) : "",
    };
  },

  toJSON(message: BankInfo): unknown {
    const obj: any = {};
    if (message.accountNumber !== "") {
      obj.accountNumber = message.accountNumber;
    }
    if (message.bankCode !== "") {
      obj.bankCode = message.bankCode;
    }
    if (message.bankName !== "") {
      obj.bankName = message.bankName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BankInfo>, I>>(base?: I): BankInfo {
    return BankInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BankInfo>, I>>(object: I): BankInfo {
    const message = createBaseBankInfo();
    message.accountNumber = object.accountNumber ?? "";
    message.bankCode = object.bankCode ?? "";
    message.bankName = object.bankName ?? "";
    return message;
  },
};

function createBaseEmail(): Email {
  return { value: "" };
}

export const Email: MessageFns<Email> = {
  encode(message: Email, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Email {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Email {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: Email): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Email>, I>>(base?: I): Email {
    return Email.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Email>, I>>(object: I): Email {
    const message = createBaseEmail();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSelfieImage(): SelfieImage {
  return { value: new Uint8Array(0) };
}

export const SelfieImage: MessageFns<SelfieImage> = {
  encode(message: SelfieImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value.length !== 0) {
      writer.uint32(10).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SelfieImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSelfieImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SelfieImage {
    return { value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0) };
  },

  toJSON(message: SelfieImage): unknown {
    const obj: any = {};
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SelfieImage>, I>>(base?: I): SelfieImage {
    return SelfieImage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SelfieImage>, I>>(object: I): SelfieImage {
    const message = createBaseSelfieImage();
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBasePhone(): Phone {
  return { value: "" };
}

export const Phone: MessageFns<Phone> = {
  encode(message: Phone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Phone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Phone {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: Phone): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Phone>, I>>(base?: I): Phone {
    return Phone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Phone>, I>>(object: I): Phone {
    const message = createBasePhone();
    message.value = object.value ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
