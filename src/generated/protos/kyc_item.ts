// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.29.3
// source: protos/kyc_item.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "brij.storage.v1";

export enum KycStatus {
  KYC_STATUS_UNSPECIFIED = 0,
  KYC_STATUS_PENDING = 1,
  KYC_STATUS_APPROVED = 2,
  KYC_STATUS_REJECTED = 3,
  UNRECOGNIZED = -1,
}

export function kycStatusFromJSON(object: any): KycStatus {
  switch (object) {
    case 0:
    case "KYC_STATUS_UNSPECIFIED":
      return KycStatus.KYC_STATUS_UNSPECIFIED;
    case 1:
    case "KYC_STATUS_PENDING":
      return KycStatus.KYC_STATUS_PENDING;
    case 2:
    case "KYC_STATUS_APPROVED":
      return KycStatus.KYC_STATUS_APPROVED;
    case 3:
    case "KYC_STATUS_REJECTED":
      return KycStatus.KYC_STATUS_REJECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KycStatus.UNRECOGNIZED;
  }
}

export function kycStatusToJSON(object: KycStatus): string {
  switch (object) {
    case KycStatus.KYC_STATUS_UNSPECIFIED:
      return "KYC_STATUS_UNSPECIFIED";
    case KycStatus.KYC_STATUS_PENDING:
      return "KYC_STATUS_PENDING";
    case KycStatus.KYC_STATUS_APPROVED:
      return "KYC_STATUS_APPROVED";
    case KycStatus.KYC_STATUS_REJECTED:
      return "KYC_STATUS_REJECTED";
    case KycStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface KycItem {
  countries: string[];
  status: KycStatus;
  provider: string;
  userPublicKey: string;
  hashes: string[];
  additionalData: { [key: string]: Uint8Array };
}

export interface KycItem_AdditionalDataEntry {
  key: string;
  value: Uint8Array;
}

function createBaseKycItem(): KycItem {
  return { countries: [], status: 0, provider: "", userPublicKey: "", hashes: [], additionalData: {} };
}

export const KycItem: MessageFns<KycItem> = {
  encode(message: KycItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.countries) {
      writer.uint32(10).string(v!);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.provider !== "") {
      writer.uint32(26).string(message.provider);
    }
    if (message.userPublicKey !== "") {
      writer.uint32(34).string(message.userPublicKey);
    }
    for (const v of message.hashes) {
      writer.uint32(42).string(v!);
    }
    Object.entries(message.additionalData).forEach(([key, value]) => {
      KycItem_AdditionalDataEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KycItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKycItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.countries.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.provider = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userPublicKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hashes.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = KycItem_AdditionalDataEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.additionalData[entry6.key] = entry6.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KycItem {
    return {
      countries: globalThis.Array.isArray(object?.countries)
        ? object.countries.map((e: any) => globalThis.String(e))
        : [],
      status: isSet(object.status) ? kycStatusFromJSON(object.status) : 0,
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
      userPublicKey: isSet(object.userPublicKey) ? globalThis.String(object.userPublicKey) : "",
      hashes: globalThis.Array.isArray(object?.hashes) ? object.hashes.map((e: any) => globalThis.String(e)) : [],
      additionalData: isObject(object.additionalData)
        ? Object.entries(object.additionalData).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: KycItem): unknown {
    const obj: any = {};
    if (message.countries?.length) {
      obj.countries = message.countries;
    }
    if (message.status !== 0) {
      obj.status = kycStatusToJSON(message.status);
    }
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    if (message.userPublicKey !== "") {
      obj.userPublicKey = message.userPublicKey;
    }
    if (message.hashes?.length) {
      obj.hashes = message.hashes;
    }
    if (message.additionalData) {
      const entries = Object.entries(message.additionalData);
      if (entries.length > 0) {
        obj.additionalData = {};
        entries.forEach(([k, v]) => {
          obj.additionalData[k] = base64FromBytes(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KycItem>, I>>(base?: I): KycItem {
    return KycItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KycItem>, I>>(object: I): KycItem {
    const message = createBaseKycItem();
    message.countries = object.countries?.map((e) => e) || [];
    message.status = object.status ?? 0;
    message.provider = object.provider ?? "";
    message.userPublicKey = object.userPublicKey ?? "";
    message.hashes = object.hashes?.map((e) => e) || [];
    message.additionalData = Object.entries(object.additionalData ?? {}).reduce<{ [key: string]: Uint8Array }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseKycItem_AdditionalDataEntry(): KycItem_AdditionalDataEntry {
  return { key: "", value: new Uint8Array(0) };
}

export const KycItem_AdditionalDataEntry: MessageFns<KycItem_AdditionalDataEntry> = {
  encode(message: KycItem_AdditionalDataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KycItem_AdditionalDataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKycItem_AdditionalDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KycItem_AdditionalDataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: KycItem_AdditionalDataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KycItem_AdditionalDataEntry>, I>>(base?: I): KycItem_AdditionalDataEntry {
    return KycItem_AdditionalDataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KycItem_AdditionalDataEntry>, I>>(object: I): KycItem_AdditionalDataEntry {
    const message = createBaseKycItem_AdditionalDataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
